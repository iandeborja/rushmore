// Prisma schema for Rushmore
// Models: User, Question, Rushmore, Vote, Friend, Comment, Report

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum ReportReason {
  INAPPROPRIATE
  SPAM
  HARASSMENT
  VIOLENCE
  COPYRIGHT
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  username  String?  @unique
  image     String?
  role      UserRole @default(USER)
  isBanned  Boolean  @default(false)
  banReason String?
  // Streak tracking
  currentStreak Int @default(0)
  longestStreak Int @default(0)
  lastPlayedDate DateTime?
  totalDaysPlayed Int @default(0)
  // Achievements
  achievements UserAchievement[]
  rushmores Rushmore[]
  votes     Vote[]
  comments  Comment[]
  friends   Friend[] @relation("UserFriends")
  friendOf  Friend[] @relation("FriendOf")
  reportsSubmitted Report[] @relation("Reporter")
  reportsReviewed Report[] @relation("Reviewer")
  createdAt DateTime @default(now())
}

model Question {
  id        String     @id @default(cuid())
  prompt    String
  date      DateTime   @unique
  rushmores Rushmore[]
  createdAt DateTime   @default(now())
}

model Rushmore {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  item1      String
  item2      String
  item3      String
  item4      String
  isHidden   Boolean  @default(false)
  hideReason String?
  votes      Vote[]
  comments   Comment[]
  reports    Report[]
  createdAt  DateTime @default(now())
}

model Vote {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  rushmore   Rushmore @relation(fields: [rushmoreId], references: [id])
  rushmoreId String
  value      Int      // 1 for upvote, -1 for downvote
  createdAt  DateTime @default(now())

  @@unique([userId, rushmoreId])
}

model Comment {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  rushmore   Rushmore @relation(fields: [rushmoreId], references: [id])
  rushmoreId String
  content    String
  isHidden   Boolean  @default(false)
  hideReason String?
  reports    Report[]
  createdAt  DateTime @default(now())
}

model Friend {
  id        String  @id @default(cuid())
  user      User    @relation("UserFriends", fields: [userId], references: [id])
  userId    String
  friend    User    @relation("FriendOf", fields: [friendId], references: [id])
  friendId  String
  createdAt DateTime @default(now())

  @@unique([userId, friendId])
}

model Report {
  id          String       @id @default(cuid())
  reporter    User         @relation("Reporter", fields: [reporterId], references: [id])
  reporterId  String
  reviewer    User?        @relation("Reviewer", fields: [reviewerId], references: [id])
  reviewerId  String?
  rushmore    Rushmore?    @relation(fields: [rushmoreId], references: [id])
  rushmoreId  String?
  comment     Comment?     @relation(fields: [commentId], references: [id])
  commentId   String?
  reason      ReportReason
  description String?
  status      ReportStatus @default(PENDING)
  resolution  String?
  createdAt   DateTime     @default(now())
  reviewedAt  DateTime?
}

model Achievement {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String   // Emoji or icon identifier
  category    String   // "streak", "social", "milestone", etc.
  requirement Int      // Number required to unlock
  users       UserAchievement[]
  createdAt   DateTime @default(now())
}

model UserAchievement {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())
  progress      Int         @default(0) // Current progress toward next tier

  @@unique([userId, achievementId])
} 